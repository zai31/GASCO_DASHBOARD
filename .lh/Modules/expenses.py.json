{
    "sourceFile": "Modules/expenses.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1758824589870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758824601249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,15 +38,8 @@\n     \"2024\": \"2024 Budget\",\r\n     \"2025\": \"2025 Budget\"\r\n }\r\n \r\n-CONSUMED_COLUMNS = {\r\n-    \"2023\": \"2023 Consumed\",\r\n-    \"2024\": \"2024 Consumed\",\r\n-    \"2025\": \"2025 Consumed\"\r\n-}\r\n-\r\n-\r\n CONSUMED_COL = \"Consumed Amount\"\r\n AVAILABLE_COL = \"Available Amount\"\r\n \r\n def get_quarter_from_date(date):\r\n"
                },
                {
                    "date": 1758824714307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,15 @@\n     \"2024\": \"2024 Budget\",\r\n     \"2025\": \"2025 Budget\"\r\n }\r\n \r\n+CONSUMED_COLUMNS = {\r\n+    \"2023\": \"2023 Consumed\",\r\n+    \"2024\": \"2024 Consumed\",\r\n+    \"2025\": \"2025 Consumed\"\r\n+}\r\n+\r\n+\r\n CONSUMED_COL = \"Consumed Amount\"\r\n AVAILABLE_COL = \"Available Amount\"\r\n \r\n def get_quarter_from_date(date):\r\n@@ -331,9 +338,31 @@\n                 st.subheader(\"📈 Annual Budget Comparison\")\r\n                 annual_data = []\r\n                 # Use full dataframe if no cost centers are selected, otherwise use the filtered one\r\n                 source_df = df if not selected_ccs else filtered_df\r\n-                for year in selected_years:\r\n+               annual_data = []\r\n+for year in selected_years:\r\n+    budget_col = BUDGET_COLUMNS.get(str(year))\r\n+    consumed_col = CONSUMED_COLUMNS.get(str(year))\r\n+    if budget_col in filtered_df.columns and consumed_col in filtered_df.columns:\r\n+        yearly = filtered_df.groupby(\"Cost Center Name\")[[budget_col, consumed_col]].sum().reset_index()\r\n+        yearly[\"Year\"] = year\r\n+        yearly.rename(columns={budget_col: \"Budget\", consumed_col: \"Consumed\"}, inplace=True)\r\n+        annual_data.append(yearly)\r\n+\r\n+if annual_data:\r\n+    annual_df = pd.concat(annual_data, ignore_index=True)\r\n+\r\n+    # Stacked bars: Budget vs Consumed\r\n+    fig = px.bar(\r\n+        annual_df,\r\n+        x=\"Year\", y=[\"Budget\", \"Consumed\"],\r\n+        color_discrete_map={\"Budget\": \"#1f77b4\", \"Consumed\": \"#d62728\"},\r\n+        barmode=\"group\",\r\n+        title=\"Annual Budget vs Consumed\"\r\n+    )\r\n+    st.plotly_chart(fig, use_container_width=True)\r\n+\r\n                     budget_col = BUDGET_COLUMNS.get(str(year))\r\n                     if budget_col and budget_col in source_df.columns:\r\n                         if not selected_ccs:\r\n                             # Total budget per year if no CC is selected\r\n"
                },
                {
                    "date": 1758824758205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -338,31 +338,9 @@\n                 st.subheader(\"📈 Annual Budget Comparison\")\r\n                 annual_data = []\r\n                 # Use full dataframe if no cost centers are selected, otherwise use the filtered one\r\n                 source_df = df if not selected_ccs else filtered_df\r\n-               annual_data = []\r\n-for year in selected_years:\r\n-    budget_col = BUDGET_COLUMNS.get(str(year))\r\n-    consumed_col = CONSUMED_COLUMNS.get(str(year))\r\n-    if budget_col in filtered_df.columns and consumed_col in filtered_df.columns:\r\n-        yearly = filtered_df.groupby(\"Cost Center Name\")[[budget_col, consumed_col]].sum().reset_index()\r\n-        yearly[\"Year\"] = year\r\n-        yearly.rename(columns={budget_col: \"Budget\", consumed_col: \"Consumed\"}, inplace=True)\r\n-        annual_data.append(yearly)\r\n-\r\n-if annual_data:\r\n-    annual_df = pd.concat(annual_data, ignore_index=True)\r\n-\r\n-    # Stacked bars: Budget vs Consumed\r\n-    fig = px.bar(\r\n-        annual_df,\r\n-        x=\"Year\", y=[\"Budget\", \"Consumed\"],\r\n-        color_discrete_map={\"Budget\": \"#1f77b4\", \"Consumed\": \"#d62728\"},\r\n-        barmode=\"group\",\r\n-        title=\"Annual Budget vs Consumed\"\r\n-    )\r\n-    st.plotly_chart(fig, use_container_width=True)\r\n-\r\n+                for year in selected_years:\r\n                     budget_col = BUDGET_COLUMNS.get(str(year))\r\n                     if budget_col and budget_col in source_df.columns:\r\n                         if not selected_ccs:\r\n                             # Total budget per year if no CC is selected\r\n"
                },
                {
                    "date": 1758824769914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,15 +38,8 @@\n     \"2024\": \"2024 Budget\",\r\n     \"2025\": \"2025 Budget\"\r\n }\r\n \r\n-CONSUMED_COLUMNS = {\r\n-    \"2023\": \"2023 Consumed\",\r\n-    \"2024\": \"2024 Consumed\",\r\n-    \"2025\": \"2025 Consumed\"\r\n-}\r\n-\r\n-\r\n CONSUMED_COL = \"Consumed Amount\"\r\n AVAILABLE_COL = \"Available Amount\"\r\n \r\n def get_quarter_from_date(date):\r\n"
                },
                {
                    "date": 1758824776945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,15 @@\n     \"2024\": \"2024 Budget\",\r\n     \"2025\": \"2025 Budget\"\r\n }\r\n \r\n+CONSUMED_COLUMNS = {\r\n+    \"2023\": \"2023 Consumed\",\r\n+    \"2024\": \"2024 Consumed\",\r\n+    \"2025\": \"2025 Consumed\"\r\n+}\r\n+\r\n+\r\n CONSUMED_COL = \"Consumed Amount\"\r\n AVAILABLE_COL = \"Available Amount\"\r\n \r\n def get_quarter_from_date(date):\r\n"
                },
                {
                    "date": 1758824817447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -338,21 +338,8 @@\n                 st.subheader(\"📈 Annual Budget Comparison\")\r\n                 annual_data = []\r\n                 # Use full dataframe if no cost centers are selected, otherwise use the filtered one\r\n                 source_df = df if not selected_ccs else filtered_df\r\n-                for year in selected_years:\r\n-                    budget_col = BUDGET_COLUMNS.get(str(year))\r\n-                    if budget_col and budget_col in source_df.columns:\r\n-                        if not selected_ccs:\r\n-                            # Total budget per year if no CC is selected\r\n-                            total_budget = source_df[budget_col].sum()\r\n-                            annual_data.append({'Year': year, 'Budget': total_budget})\r\n-                        else:\r\n-                            # Budget per selected CC per year\r\n-                            yearly_sum = source_df.groupby(\"Cost Center Name\")[budget_col].sum().reset_index()\r\n-                            yearly_sum.rename(columns={budget_col: 'Budget'}, inplace=True)\r\n-                            yearly_sum['Year'] = year\r\n-                            annual_data.append(yearly_sum)\r\n                 \r\n                 if annual_data:\r\n                     annual_df = pd.concat([pd.DataFrame([x]) if isinstance(x, dict) else x for x in annual_data], ignore_index=True)\r\n                     if not annual_df.empty and annual_df['Budget'].sum() > 0:\r\n"
                },
                {
                    "date": 1758824869745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -338,9 +338,33 @@\n                 st.subheader(\"📈 Annual Budget Comparison\")\r\n                 annual_data = []\r\n                 # Use full dataframe if no cost centers are selected, otherwise use the filtered one\r\n                 source_df = df if not selected_ccs else filtered_df\r\n-                \r\n+                annual_data = []\r\n+for year in selected_years:\r\n+    budget_col = BUDGET_COLUMNS.get(str(year))\r\n+    consumed_col = CONSUMED_COLUMNS.get(str(year))\r\n+    if budget_col in filtered_df.columns and consumed_col in filtered_df.columns:\r\n+        yearly = filtered_df.groupby(\"Cost Center Name\")[[budget_col, consumed_col]].sum().reset_index()\r\n+        yearly[\"Year\"] = year\r\n+        yearly.rename(columns={budget_col: \"Budget\", consumed_col: \"Consumed\"}, inplace=True)\r\n+        annual_data.append(yearly)\r\n+\r\n+if annual_data:\r\n+    annual_df = pd.concat(annual_data, ignore_index=True)\r\n+\r\n+    # Stacked bars: Budget vs Consumed\r\n+    fig = px.bar(\r\n+        annual_df,\r\n+        x=\"Year\", y=[\"Budget\", \"Consumed\"],\r\n+        color_discrete_map={\"Budget\": \"#1f77b4\", \"Consumed\": \"#d62728\"},\r\n+        barmode=\"group\",\r\n+        title=\"Annual Budget vs Consumed\"\r\n+    )\r\n+    st.plotly_chart(fig, use_container_width=True)\r\n+\r\n+\r\n+\r\n                 if annual_data:\r\n                     annual_df = pd.concat([pd.DataFrame([x]) if isinstance(x, dict) else x for x in annual_data], ignore_index=True)\r\n                     if not annual_df.empty and annual_df['Budget'].sum() > 0:\r\n                         if not selected_ccs:\r\n"
                },
                {
                    "date": 1758824881015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -338,9 +338,31 @@\n                 st.subheader(\"📈 Annual Budget Comparison\")\r\n                 annual_data = []\r\n                 # Use full dataframe if no cost centers are selected, otherwise use the filtered one\r\n                 source_df = df if not selected_ccs else filtered_df\r\n-                \r\n+                annual_data = []\r\n+for year in selected_years:\r\n+    budget_col = BUDGET_COLUMNS.get(str(year))\r\n+    consumed_col = CONSUMED_COLUMNS.get(str(year))\r\n+    if budget_col in filtered_df.columns and consumed_col in filtered_df.columns:\r\n+        yearly = filtered_df.groupby(\"Cost Center Name\")[[budget_col, consumed_col]].sum().reset_index()\r\n+        yearly[\"Year\"] = year\r\n+        yearly.rename(columns={budget_col: \"Budget\", consumed_col: \"Consumed\"}, inplace=True)\r\n+        annual_data.append(yearly)\r\n+\r\n+if annual_data:\r\n+    annual_df = pd.concat(annual_data, ignore_index=True)\r\n+\r\n+    # Stacked bars: Budget vs Consumed\r\n+    fig = px.bar(\r\n+        annual_df,\r\n+        x=\"Year\", y=[\"Budget\", \"Consumed\"],\r\n+        color_discrete_map={\"Budget\": \"#1f77b4\", \"Consumed\": \"#d62728\"},\r\n+        barmode=\"group\",\r\n+        title=\"Annual Budget vs Consumed\"\r\n+    )\r\n+    st.plotly_chart(fig, use_container_width=True)\r\n+\r\n                 if annual_data:\r\n                     annual_df = pd.concat([pd.DataFrame([x]) if isinstance(x, dict) else x for x in annual_data], ignore_index=True)\r\n                     if not annual_df.empty and annual_df['Budget'].sum() > 0:\r\n                         if not selected_ccs:\r\n"
                },
                {
                    "date": 1758825123176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -335,9 +335,9 @@\n             if not selected_years:\r\n                 st.warning(\"Please select at least one year.\")\r\n             else:\r\n                 st.subheader(\"📈 Annual Budget Comparison\")\r\n-                annual_data = []\r\n+              #  annual_data = []\r\n                 # Use full dataframe if no cost centers are selected, otherwise use the filtered one\r\n                 source_df = df if not selected_ccs else filtered_df\r\n                 for year in selected_years:\r\n                     budget_col = BUDGET_COLUMNS.get(str(year))\r\n"
                }
            ],
            "date": 1758824589870,
            "name": "Commit-0",
            "content": "import streamlit as st\r\nimport pandas as pd\r\nfrom openpyxl import load_workbook\r\nfrom datetime import datetime\r\nimport plotly.express as px\r\nimport plotly.graph_objects as go\r\nfrom plotly.subplots import make_subplots\r\nimport io\r\nimport base64\r\nfrom reportlab.lib.pagesizes import letter, A4\r\nfrom reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image\r\nfrom reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\r\nfrom reportlab.lib.units import inch\r\nfrom reportlab.lib import colors\r\nimport matplotlib.pyplot as plt\r\nimport seaborn as sns\r\nimport pandas as pd\r\nfrom Modules.maintenance import  solve_true_min_cost_mip, solve_true_min_cost_and_min_gap, solve_true_min_cost_and_max_gap\r\n\r\n# Import compressor data functions\r\ntry:\r\n    from Modules.compressor_data import show_compressor_data_entry, show_compressor_data_view\r\n    COMPRESSOR_MODULE_AVAILABLE = True\r\nexcept ImportError as e:\r\n    COMPRESSOR_MODULE_AVAILABLE = False\r\n    def show_compressor_data_entry():\r\n        st.error(f\"Compressor data module not available: {e}\")\r\n    def show_compressor_data_view():\r\n        st.error(f\"Compressor data module not available: {e}\")\r\n\r\n\r\n\r\nCURRENT_YEAR = datetime.now().year\r\nEXCEL_PATH = \"Data/Budget Monitoring.xlsx\"\r\n\r\nBUDGET_COLUMNS = {\r\n    \"2023\": \"2023 Budget\",\r\n    \"2024\": \"2024 Budget\",\r\n    \"2025\": \"2025 Budget\"\r\n}\r\n\r\nCONSUMED_COLUMNS = {\r\n    \"2023\": \"2023 Consumed\",\r\n    \"2024\": \"2024 Consumed\",\r\n    \"2025\": \"2025 Consumed\"\r\n}\r\n\r\n\r\nCONSUMED_COL = \"Consumed Amount\"\r\nAVAILABLE_COL = \"Available Amount\"\r\n\r\ndef get_quarter_from_date(date):\r\n    if pd.isna(date):\r\n        return None\r\n    month = date.month\r\n    if month <= 3:\r\n        return \"Q1\"\r\n    elif month <= 6:\r\n        return \"Q2\"\r\n    elif month <= 9:\r\n        return \"Q3\"\r\n    else:\r\n        return \"Q4\"\r\n\r\ndef get_year_from_date(date):\r\n    if pd.isna(date):\r\n        return None\r\n    return date.year\r\n\r\n# REPLACE YOUR EXISTING load_budget_data() FUNCTION WITH THIS:\r\n\r\n\r\n\r\ndef append_expense_to_excel(new_data: dict):\r\n    try:\r\n        df = pd.read_excel(EXCEL_PATH)\r\n        df.columns = df.columns.str.strip()\r\n\r\n        new_row = pd.DataFrame([new_data])\r\n\r\n        # Avoid duplicates\r\n        if ((df == new_row.iloc[0]).all(axis=1)).any():\r\n            st.warning(\"This exact record already exists.\")\r\n            return False\r\n\r\n        df = pd.concat([df, new_row], ignore_index=True)\r\n        df.to_excel(EXCEL_PATH, index=False, engine='openpyxl')\r\n        return True\r\n    except Exception as e:\r\n        st.error(f\"Error writing to Excel: {e}\")\r\n        return False\r\n\r\n\r\ndef load_budget_data():\r\n    try:\r\n        df = pd.read_excel(EXCEL_PATH)\r\n        df.columns = df.columns.str.strip()  # clean column names\r\n\r\n        # Force numeric for budget & amount columns\r\n        for col in list(BUDGET_COLUMNS.values()) + [CONSUMED_COL]:\r\n            if col in df.columns:\r\n                df[col] = pd.to_numeric(df[col], errors=\"coerce\").fillna(0)\r\n\r\n        # Calculate Available\r\n        if AVAILABLE_COL not in df.columns:\r\n            df[AVAILABLE_COL] = df[BUDGET_COLUMNS[\"2025\"]] - df[CONSUMED_COL]\r\n\r\n        # Process Date\r\n        if \"Date\" in df.columns:\r\n            df[\"Date\"] = pd.to_datetime(df[\"Date\"], errors=\"coerce\")\r\n            df[\"Quarter\"] = df[\"Date\"].apply(get_quarter_from_date)\r\n            df[\"Year\"] = df[\"Date\"].apply(get_year_from_date)\r\n        else:\r\n            df[\"Date\"] = pd.to_datetime(\"2025-01-01\")\r\n            df[\"Quarter\"] = \"Q1\"\r\n            df[\"Year\"] = 2025\r\n\r\n        # Combined cost center for dropdown\r\n        if \"Cost Center Number\" in df.columns and \"Cost Center Name\" in df.columns:\r\n            df[\"Cost Center Display\"] = df[\"Cost Center Number\"].astype(str) + \" - \" + df[\"Cost Center Name\"]\r\n\r\n        # Combined account for dropdown\r\n        if \"Account number\" in df.columns and \"Account name\" in df.columns:\r\n            df[\"Account Display\"] = df[\"Account number\"].astype(str) + \" - \" + df[\"Account name\"]\r\n\r\n        # Extract unique values for the expected return\r\n        cost_center_names = sorted(df[\"Cost Center Name\"].dropna().unique().tolist()) if \"Cost Center Name\" in df.columns else []\r\n        cost_center_numbers = sorted(df[\"Cost Center Number\"].dropna().unique().tolist()) if \"Cost Center Number\" in df.columns else []\r\n        account_names = sorted(df[\"Account name\"].dropna().unique().tolist()) if \"Account name\" in df.columns else []\r\n        account_numbers = sorted(df[\"Account number\"].dropna().unique().tolist()) if \"Account number\" in df.columns else []\r\n\r\n        return df, cost_center_names, cost_center_numbers, account_names, account_numbers\r\n        \r\n    except Exception as e:\r\n        st.error(f\"Failed to load budget data: {e}\")\r\n        # Return empty values for all expected returns\r\n        return pd.DataFrame(), [], [], [], []\r\n\r\ndef log_expense_form():\r\n    df, _, _, _, _ = load_budget_data()\r\n    if df.empty:\r\n        return\r\n\r\n    with st.form(\"log_expense_form\"):\r\n        # Step 1: Select Cost Center (combined name + number)\r\n        selected_cc_display = st.selectbox(\"Cost Center\", sorted(df[\"Cost Center Display\"].unique()))\r\n        cc_row = df[df[\"Cost Center Display\"] == selected_cc_display].iloc[0]\r\n        selected_cc_number = cc_row[\"Cost Center Number\"]\r\n        selected_cc_name = cc_row[\"Cost Center Name\"]\r\n\r\n        # Step 2: Select Account (combined number + name)\r\n        filtered_acc_displays = df[df[\"Cost Center Display\"] == selected_cc_display][\"Account Display\"].dropna().unique().tolist()\r\n        selected_acc_display = st.selectbox(\"Select Account\", sorted(filtered_acc_displays))\r\n        \r\n        # Extract account number and name from the selected display\r\n        acc_row = df[\r\n            (df[\"Cost Center Display\"] == selected_cc_display) &\r\n            (df[\"Account Display\"] == selected_acc_display)\r\n        ].iloc[0]\r\n        selected_acc_number = acc_row[\"Account number\"]\r\n        selected_acc_name = acc_row[\"Account name\"]\r\n\r\n        # Step 3: Date\r\n        date_val = st.date_input(\"Date\", pd.Timestamp.today())\r\n\r\n        # Step 4: Budget info\r\n        match = df[\r\n            (df[\"Cost Center Number\"] == selected_cc_number) &\r\n            (df[\"Cost Center Name\"] == selected_cc_name) &\r\n            (df[\"Account name\"] == selected_acc_name) &\r\n            (df[\"Account number\"] == selected_acc_number)\r\n        ]\r\n\r\n        budget_2025 = match[\"2025 Budget\"].iloc[0] if not match.empty else 0\r\n        consumed_before = match[\"Consumed Amount\"].iloc[0] if not match.empty else 0\r\n        available_before = match[\"Available Amount\"].iloc[0] if not match.empty else 0\r\n\r\n        st.write(f\"**2025 Budget:** {budget_2025}\")\r\n        st.write(f\"**Consumed Before:** {consumed_before}\")\r\n        st.write(f\"**Available Before:** {available_before}\")\r\n\r\n        consumed_now = st.number_input(\"Consumed Amount\", min_value=0.0, step=0.01)\r\n        available_after = available_before - consumed_now\r\n        st.write(f\"**Available After:** {available_after}\")\r\n\r\n        submitted = st.form_submit_button(\"Submit Expense\")\r\n        if submitted:\r\n            new_row = {\r\n                \"Cost Center Number\": selected_cc_number,\r\n                \"Cost Center Name\": selected_cc_name,\r\n                \"Account number\": selected_acc_number,\r\n                \"Account name\": selected_acc_name,\r\n                \"Date\": date_val,\r\n                \"Quarter\": get_quarter_from_date(date_val),\r\n                \"Year\": date_val.year,\r\n                \"2023 Budget\": match[\"2023 Budget\"].iloc[0] if not match.empty else 0,\r\n                \"2024 Budget\": match[\"2024 Budget\"].iloc[0] if not match.empty else 0,\r\n                \"2025 Budget\": budget_2025,\r\n                \"Consumed Amount\": consumed_now,\r\n                \"Available Amount\": available_after\r\n            }\r\n            if append_expense_to_excel(new_row):\r\n                st.success(\"Expense logged successfully.\")\r\n\r\ndef show_filtered_dashboard():\r\n    st.title(\"📊 Budget Dashboard\")\r\n\r\n    # ------------------ 📥 Load Data First ------------------\r\n    df, cost_center_names, cost_center_numbers, account_names, account_numbers = load_budget_data()\r\n    if df.empty:\r\n        st.warning(\"No data available to display.\")\r\n        return\r\n\r\n    # ------------------ 🔧 Log Expense ------------------\r\n    with st.expander(\"➕ Log New Expense\", expanded=True):\r\n        # STEP 1: Cost Center selection OUTSIDE the form (so it can update dynamically)\r\n        if \"Cost Center Display\" in df.columns and not df.empty:\r\n            cost_center_options = sorted(df[\"Cost Center Display\"].dropna().unique())\r\n            \r\n            if cost_center_options:\r\n                selected_cc_display = st.selectbox(\r\n                    \"🏢 Select Cost Center\", \r\n                    cost_center_options,\r\n                    key=\"cost_center_selector\"\r\n                )\r\n                \r\n                # Get the selected cost center details\r\n                cc_rows = df[df[\"Cost Center Display\"] == selected_cc_display]\r\n                if not cc_rows.empty:\r\n                    selected_cc_number = cc_rows[\"Cost Center Number\"].iloc[0]\r\n                    selected_cc_name = cc_rows[\"Cost Center Name\"].iloc[0]\r\n                    filtered_acc_displays = cc_rows[\"Account Display\"].dropna().unique().tolist()\r\n                    if filtered_acc_displays:\r\n                        with st.form(\"log_expense_form_main\"):\r\n                            selected_acc_display = st.selectbox(\"📊 Select Account\", sorted(filtered_acc_displays), key=\"account_display_selector\")\r\n                            acc_row = cc_rows[cc_rows[\"Account Display\"] == selected_acc_display].iloc[0]\r\n                            selected_acc_number = acc_row[\"Account number\"]\r\n                            selected_acc_name = acc_row[\"Account name\"]\r\n                            expense_date = st.date_input(\"📅 Expense Date\", value=datetime.now())\r\n                            match = df[(df[\"Cost Center Number\"] == selected_cc_number) & (df[\"Cost Center Name\"] == selected_cc_name) & (df[\"Account name\"] == selected_acc_name) & (df[\"Account number\"] == selected_acc_number)]\r\n                            if not match.empty:\r\n                                budget_2025 = match[\"2025 Budget\"].iloc[0] if \"2025 Budget\" in match.columns else 0\r\n                                budget_2024 = match[\"2024 Budget\"].iloc[0] if \"2024 Budget\" in match.columns else 0\r\n                                budget_2023 = match[\"2023 Budget\"].iloc[0] if \"2023 Budget\" in match.columns else 0\r\n                                consumed_before = match[CONSUMED_COL].iloc[0] if CONSUMED_COL in match.columns else 0\r\n                                available_before = match[AVAILABLE_COL].iloc[0] if AVAILABLE_COL in match.columns else budget_2025\r\n                                st.markdown(\"**📈 Current Budget Status:**\")\r\n                                col1, col2, col3 = st.columns(3)\r\n                                with col1:\r\n                                    st.metric(\"2025 Budget\", f\"${budget_2025:,.2f}\")\r\n                                with col2:\r\n                                    st.metric(\"Consumed\", f\"${consumed_before:,.2f}\")\r\n                                with col3:\r\n                                    st.metric(\"Available\", f\"${available_before:,.2f}\")\r\n                                consumed_now = st.number_input(\"💰 New Expense Amount\", min_value=0.0, step=0.01, help=\"Enter the amount you want to log as consumed\")\r\n                                if consumed_now > 0:\r\n                                    new_consumed_total = consumed_before + consumed_now\r\n                                    available_after = budget_2025 - new_consumed_total\r\n                                    st.markdown(\"**📊 After This Expense:**\")\r\n                                    col1a, col2a = st.columns(2)\r\n                                    with col1a:\r\n                                        st.write(f\"**Total Consumed:** ${new_consumed_total:,.2f}\")\r\n                                    with col2a:\r\n                                        st.write(f\"**Available:** ${available_after:,.2f}\")\r\n                                    if available_after < 0:\r\n                                        st.error(\"⚠️ This expense will exceed the available budget!\")\r\n                                    elif available_after < (budget_2025 * 0.1):\r\n                                        st.warning(\"⚠️ Low budget remaining!\")\r\n                                form_data = {'selected_cc_number': selected_cc_number, 'selected_cc_name': selected_cc_name, 'selected_acc_name': selected_acc_name, 'selected_acc_number': selected_acc_number, 'expense_date': expense_date, 'consumed_now': consumed_now, 'budget_2025': budget_2025, 'budget_2024': budget_2024, 'budget_2023': budget_2023, 'consumed_before': consumed_before}\r\n                            else:\r\n                                st.error(\"❌ No exact match found for the selected combination.\")\r\n                                consumed_now = 0\r\n                                form_data = {}\r\n                            submit = st.form_submit_button(\"📝 Log Expense\", type=\"primary\")\r\n                        if submit and 'form_data' in locals() and form_data and consumed_now > 0:\r\n                            try:\r\n                                new_consumed_total = form_data['consumed_before'] + form_data['consumed_now']\r\n                                available_after = form_data['budget_2025'] - new_consumed_total\r\n                                row = {\"Cost Center Number\": form_data['selected_cc_number'], \"Cost Center Name\": form_data['selected_cc_name'], \"Account number\": form_data['selected_acc_number'], \"Account name\": form_data['selected_acc_name'], \"Date\": form_data['expense_date'], \"Quarter\": get_quarter_from_date(form_data['expense_date']), \"Year\": form_data['expense_date'].year, \"2023 Budget\": form_data['budget_2023'], \"2024 Budget\": form_data['budget_2024'], \"2025 Budget\": form_data['budget_2025'], CONSUMED_COL: new_consumed_total, AVAILABLE_COL: available_after}\r\n                                success = append_expense_to_excel(row)\r\n                                if success:\r\n                                    st.success(\"✅ Expense logged and saved successfully!\")\r\n                                    st.balloons()\r\n                                    st.rerun()\r\n                                else:\r\n                                    st.error(\"❌ Failed to log the expense. Please try again.\")\r\n                            except Exception as e:\r\n                                st.error(f\"❌ Error logging expense: {str(e)}\")\r\n                        elif submit and consumed_now <= 0:\r\n                            st.warning(\"⚠️ Please enter an expense amount greater than 0.\")\r\n\r\n    tab1, tab2 = st.tabs([\"📊 Analysis Dashboard\", \"📋 Summary & Insights\"])\r\n    with tab1:\r\n        st.markdown(\"---\")\r\n        st.subheader(\"🎯 Filters\")\r\n        col1, col2, col3 = st.columns(3)\r\n        with col1:\r\n            time_period = st.selectbox(\"Select Time Period Type\", options=[\"Annual\", \"Quarterly\"], help=\"Choose between annual or quarterly analysis\")\r\n        with col2:\r\n            if time_period == \"Annual\":\r\n                selected_years = st.multiselect(\"Select Years to Compare\", options=list(BUDGET_COLUMNS.keys()), default=[\"2025\", \"2024\", \"2023\"])\r\n            else:\r\n                available_years = sorted(df[\"Year\"].unique()) if \"Year\" in df.columns else []\r\n                if available_years:\r\n                    selected_year = st.selectbox(\"Select Year for Quarterly Analysis\", options=available_years, index=len(available_years) - 1)\r\n                    selected_quarters = st.multiselect(\"Select Quarters to Compare\", options=[\"Q1\", \"Q2\", \"Q3\", \"Q4\"], default=[\"Q1\", \"Q2\", \"Q3\", \"Q4\"])\r\n                else:\r\n                    selected_year, selected_quarters = None, []\r\n        with col3:\r\n            cc_options = [\"All\"] + cost_center_names\r\n            selected_ccs = st.multiselect(\"Select Cost Centers\", options=cc_options, default=[\"All\"])\r\n        \r\n        # Filter by Cost Center\r\n        if \"All\" in selected_ccs or not selected_ccs:\r\n            filtered_df = df\r\n        else:\r\n            filtered_df = df[df[\"Cost Center Name\"].isin(selected_ccs)]\r\n\r\n        # Filter by Account\r\n        account_options = [\"All\"] + sorted(filtered_df[\"Account name\"].unique())\r\n        selected_accounts = st.multiselect(\"Select Accounts\", options=account_options, default=[\"All\"])\r\n        if \"All\" not in selected_accounts and selected_accounts:\r\n            filtered_df = filtered_df[filtered_df[\"Account name\"].isin(selected_accounts)]\r\n        st.markdown(\"---\")\r\n        if time_period == \"Annual\":\r\n            if \"All\" not in selected_accounts and selected_accounts:\r\n                st.subheader(\"Consumed vs. Available Budget\")\r\n                account_summary = filtered_df.groupby([\"Cost Center Name\", \"Account name\"]) [[CONSUMED_COL, AVAILABLE_COL]].sum().reset_index()\r\n                melted_data = pd.melt(account_summary, id_vars=[\"Cost Center Name\", \"Account name\"], value_vars=[CONSUMED_COL, AVAILABLE_COL], var_name=\"Budget Type\", value_name=\"Amount\")\r\n                if not melted_data.empty:\r\n                    fig_con_avail = px.bar(melted_data, x=\"Account name\", y=\"Amount\", color=\"Budget Type\", barmode=\"group\", title=\"Consumed vs. Available by Account\", color_discrete_map={CONSUMED_COL: '#d62728', AVAILABLE_COL: '#2ca02c'}, text=\"Amount\", facet_col=\"Cost Center Name\", facet_col_wrap=4)\r\n                    fig_con_avail.update_traces(texttemplate='$%{text:,.0f}', textposition='outside')\r\n                    fig_con_avail.update_layout(yaxis_title=\"Amount ($)\")\r\n                    st.plotly_chart(fig_con_avail, use_container_width=True)\r\n            if not selected_years:\r\n                st.warning(\"Please select at least one year.\")\r\n            else:\r\n                st.subheader(\"📈 Annual Budget Comparison\")\r\n                annual_data = []\r\n                # Use full dataframe if no cost centers are selected, otherwise use the filtered one\r\n                source_df = df if not selected_ccs else filtered_df\r\n                for year in selected_years:\r\n                    budget_col = BUDGET_COLUMNS.get(str(year))\r\n                    if budget_col and budget_col in source_df.columns:\r\n                        if not selected_ccs:\r\n                            # Total budget per year if no CC is selected\r\n                            total_budget = source_df[budget_col].sum()\r\n                            annual_data.append({'Year': year, 'Budget': total_budget})\r\n                        else:\r\n                            # Budget per selected CC per year\r\n                            yearly_sum = source_df.groupby(\"Cost Center Name\")[budget_col].sum().reset_index()\r\n                            yearly_sum.rename(columns={budget_col: 'Budget'}, inplace=True)\r\n                            yearly_sum['Year'] = year\r\n                            annual_data.append(yearly_sum)\r\n                \r\n                if annual_data:\r\n                    annual_df = pd.concat([pd.DataFrame([x]) if isinstance(x, dict) else x for x in annual_data], ignore_index=True)\r\n                    if not annual_df.empty and annual_df['Budget'].sum() > 0:\r\n                        if not selected_ccs:\r\n                            fig_annual = px.bar(annual_df, x='Year', y='Budget', title='Total Annual Budget Comparison', text='Budget')\r\n                            fig_annual.update_traces(texttemplate='$%{text:,.2s}', textposition='outside')\r\n                        else:\r\n                            fig_annual = px.bar(annual_df, x='Year', y='Budget', color='Cost Center Name', barmode='group', title='Annual Budget Comparison by Cost Center')\r\n                        st.plotly_chart(fig_annual, use_container_width=True)\r\n\r\n                        # --- Annual Trend Line Chart ---\r\n                        st.subheader(\"📈 Annual Budget Trend\")\r\n                        if not selected_ccs:\r\n                            fig_annual_trend = px.line(annual_df, x='Year', y='Budget', title='Total Annual Budget Trend', markers=True)\r\n                        else:\r\n                            fig_annual_trend = px.line(annual_df, x='Year', y='Budget', color='Cost Center Name', title='Annual Budget Trend by Cost Center', markers=True)\r\n                        fig_annual_trend.update_traces(textposition=\"top center\")\r\n                        st.plotly_chart(fig_annual_trend, use_container_width=True)\r\n\r\n                # --- Chart by Account --- \r\n                if selected_accounts:\r\n                    st.subheader(\"📊 Annual Budget by Account\")\r\n                    account_annual_data = []\r\n                    for year in selected_years:\r\n                        budget_col = BUDGET_COLUMNS.get(str(year))\r\n                        if budget_col and budget_col in filtered_df.columns:\r\n                            year_data = filtered_df.groupby([\"Cost Center Name\", \"Account name\"])[budget_col].sum().reset_index()\r\n                            year_data.rename(columns={budget_col: 'Budget'}, inplace=True)\r\n                            year_data['Year'] = year\r\n                            account_annual_data.append(year_data)\r\n                    \r\n                    if account_annual_data:\r\n                        account_df = pd.concat(account_annual_data, ignore_index=True)\r\n                        if not account_df.empty and account_df['Budget'].sum() > 0:\r\n                            fig_accounts = px.bar(account_df, x=\"Account name\", y=\"Budget\", color=\"Year\", barmode=\"group\",\r\n                                                  title=\"Annual Budget by Account\", facet_col=\"Cost Center Name\", facet_col_wrap=4)\r\n                            st.plotly_chart(fig_accounts, use_container_width=True)\r\n        else:  # Quarterly Analysis\r\n            if not selected_quarters or selected_year is None:\r\n                st.warning(\"Please select a year and at least one quarter.\")\r\n            else:\r\n                st.subheader(f\"📈 {selected_year} Quarterly Consumption Trend\")\r\n                budget_col = BUDGET_COLUMNS.get(str(selected_year))\r\n                if budget_col and budget_col in filtered_df.columns:\r\n                    quarter_filtered = filtered_df[(filtered_df[\"Year\"] == selected_year) & (filtered_df[\"Quarter\"].isin(selected_quarters))].copy()\r\n                    \r\n                    if not quarter_filtered.empty:\r\n                        # Ensure quarters are sorted correctly\r\n                        quarter_order = [f'Q{i}' for i in range(1, 5)]\r\n                        quarter_filtered['Quarter'] = pd.Categorical(quarter_filtered['Quarter'], categories=quarter_order, ordered=True)\r\n                        \r\n                        # Aggregate data for consumption\r\n                        quarterly_consumed_agg = quarter_filtered.groupby([\"Cost Center Name\", \"Account name\", \"Quarter\"])[CONSUMED_COL].sum().reset_index()\r\n                        \r\n                        if not quarterly_consumed_agg.empty and quarterly_consumed_agg[CONSUMED_COL].sum() > 0:\r\n                            fig_quarterly_trend = px.line(\r\n                                quarterly_consumed_agg,\r\n                                x='Quarter',\r\n                                y=CONSUMED_COL,\r\n                                color='Account name',\r\n                                markers=True,\r\n                                title=f'Quarterly Consumption Trend for {selected_year}',\r\n                                facet_col=\"Cost Center Name\",\r\n                                facet_col_wrap=4\r\n                            )\r\n                            st.plotly_chart(fig_quarterly_trend, use_container_width=True)\r\n\r\n                            # --- Quarterly Consumed Amount Bar Chart ---\r\n                            st.subheader(f'📊 {selected_year} Consumed Amount by Quarter')\r\n                            consumed_agg = quarter_filtered.groupby([\"Cost Center Name\", \"Account name\", \"Quarter\"])[CONSUMED_COL].sum().reset_index()\r\n                            if not consumed_agg.empty and consumed_agg[CONSUMED_COL].sum() > 0:\r\n                                fig_consumed_bar = px.bar(\r\n                                    consumed_agg,\r\n                                    x='Account name',\r\n                                    y=CONSUMED_COL,\r\n                                    color='Quarter',\r\n                                    barmode='group',\r\n                                    title=f'Consumed Amount for {selected_year}',\r\n                                    facet_col=\"Cost Center Name\",\r\n                                    facet_col_wrap=4\r\n                                )\r\n                                st.plotly_chart(fig_consumed_bar, use_container_width=True)\r\n                            else:\r\n                                st.info(\"No consumption data to display for the selected period.\")\r\n\r\n                            # --- Consumed Amount by Cost Center Bar Chart ---\r\n                            st.subheader(f'📊 {selected_year} Consumed Amount by Cost Center')\r\n                            consumed_by_cc = quarter_filtered.groupby(\"Cost Center Name\")[CONSUMED_COL].sum().reset_index()\r\n                            if not consumed_by_cc.empty and consumed_by_cc[CONSUMED_COL].sum() > 0:\r\n                                fig_consumed_cc_bar = px.bar(\r\n                                    consumed_by_cc,\r\n                                    x='Cost Center Name',\r\n                                    y=CONSUMED_COL,\r\n                                    title=f'Consumed Amount by Cost Center for {selected_year}',\r\n                                    text=CONSUMED_COL\r\n                                )\r\n                                fig_consumed_cc_bar.update_traces(texttemplate='$%{text:,.2s}', textposition='outside')\r\n                                st.plotly_chart(fig_consumed_cc_bar, use_container_width=True)\r\n                        else:\r\n                            st.info(\"No budget data to display for the selected quarterly period.\")\r\n                    else:\r\n                        st.info(\"No data available for the selected quarters.\")\r\n        st.markdown(\"---\")\r\n        st.subheader(\"📋 Detailed Data View\")\r\n        st.dataframe(filtered_df)\r\n    \r\n    with tab2:\r\n        show_summary_tab(df)\r\ndef generate_report(df):\r\n    \"\"\"Generate a comprehensive PDF report\"\"\"\r\n    try:\r\n        # Create a buffer for the PDF\r\n        buffer = io.BytesIO()\r\n        doc = SimpleDocTemplate(buffer, pagesize=A4)\r\n        story = []\r\n        styles = getSampleStyleSheet()\r\n        \r\n        # Title\r\n        title_style = ParagraphStyle(\r\n            'CustomTitle',\r\n            parent=styles['Heading1'],\r\n            fontSize=24,\r\n            spaceAfter=30,\r\n            alignment=1  # Center alignment\r\n        )\r\n        story.append(Paragraph(f\"GASCO Budget Analysis Report - {CURRENT_YEAR}\", title_style))\r\n        story.append(Spacer(1, 20))\r\n        \r\n        # Executive Summary\r\n        story.append(Paragraph(\"Executive Summary\", styles['Heading2']))\r\n        story.append(Spacer(1, 12))\r\n        \r\n        # Key metrics\r\n        total_budget_2025 = df[\"2025 Budget\"].sum()\r\n        total_consumed = df[CONSUMED_COL].sum()\r\n        total_available = df[AVAILABLE_COL].sum()\r\n        utilization_rate = (total_consumed / total_budget_2025 * 100) if total_budget_2025 > 0 else 0\r\n        \r\n        summary_text = f\"\"\"\r\n        <b>Key Metrics:</b><br/>\r\n        • Total Budget ({CURRENT_YEAR}): {total_budget_2025:,.0f}<br/>\r\n        • Total Consumed: {total_consumed:,.0f}<br/>\r\n        • Total Available: {total_available:,.0f}<br/>\r\n        • Utilization Rate: {utilization_rate:.1f}%<br/>\r\n        • Total Cost Centers: {df[\"Cost Center Name\"].nunique()}<br/>\r\n        • Total Accounts: {df[\"Account name\"].nunique()}<br/>\r\n        • Total Records: {len(df)}\r\n        \"\"\"\r\n        story.append(Paragraph(summary_text, styles['Normal']))\r\n        story.append(Spacer(1, 20))\r\n        \r\n        # Top Performers\r\n        story.append(Paragraph(\"Top Performers\", styles['Heading2']))\r\n        story.append(Spacer(1, 12))\r\n        \r\n        # Top cost centers\r\n        top_cc = df.groupby(\"Cost Center Name\")[\"2025 Budget\"].sum().sort_values(ascending=False).head(5)\r\n        cc_text = \"<b>Top 5 Cost Centers by Budget:</b><br/>\"\r\n        for i, (cc, budget) in enumerate(top_cc.items(), 1):\r\n            cc_text += f\"{i}. {cc}: {budget:,.0f}<br/>\"\r\n        story.append(Paragraph(cc_text, styles['Normal']))\r\n        story.append(Spacer(1, 12))\r\n        \r\n        # Top accounts\r\n        top_accounts = df.groupby(\"Account name\")[\"2025 Budget\"].sum().sort_values(ascending=False).head(5)\r\n        account_text = \"<b>Top 5 Accounts by Budget:</b><br/>\"\r\n        for i, (account, budget) in enumerate(top_accounts.items(), 1):\r\n            account_text += f\"{i}. {account}: {budget:,.0f}<br/>\"\r\n        story.append(Paragraph(account_text, styles['Normal']))\r\n        story.append(Spacer(1, 20))\r\n        \r\n        # Year-over-Year Analysis\r\n        story.append(Paragraph(\"Year-over-Year Analysis\", styles['Heading2']))\r\n        story.append(Spacer(1, 12))\r\n        \r\n        total_2023 = df[\"2023 Budget\"].sum()\r\n        total_2024 = df[\"2024 Budget\"].sum()\r\n        total_2025 = df[\"2025 Budget\"].sum()\r\n        \r\n        growth_2024 = ((total_2024 - total_2023) / total_2023 * 100) if total_2023 > 0 else 0\r\n        growth_2025 = ((total_2025 - total_2024) / total_2024 * 100) if total_2024 > 0 else 0\r\n        \r\n        yoy_text = f\"\"\"\r\n        <b>Budget Trends:</b><br/>\r\n        • 2023 Total: {total_2023:,.0f}<br/>\r\n        • 2024 Total: {total_2024:,.0f}<br/>\r\n        • 2025 Total: {total_2025:,.0f}<br/>\r\n        • 2024 Growth: {growth_2024:+.1f}%<br/>\r\n        • 2025 Growth: {growth_2025:+.1f}%<br/>\r\n        • 3-Year CAGR: {((total_2025/total_2023)**(1/2)-1)*100:.1f}%\r\n        \"\"\"\r\n        story.append(Paragraph(yoy_text, styles['Normal']))\r\n        story.append(Spacer(1, 20))\r\n        \r\n        # Quarterly Analysis (if available)\r\n        if \"Quarter\" in df.columns:\r\n            story.append(Paragraph(\"Quarterly Analysis\", styles['Heading2']))\r\n            story.append(Spacer(1, 12))\r\n            \r\n            quarterly_summary = df.groupby(\"Quarter\").agg({\r\n                \"2025 Budget\": \"sum\",\r\n                \"Cost Center Name\": \"nunique\",\r\n                \"Account name\": \"nunique\"\r\n            }).round(0)\r\n            \r\n            # Create quarterly table\r\n            q_data = [[\"Quarter\", \"Total Budget\", \"Cost Centers\", \"Accounts\"]]\r\n            for quarter in [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]:\r\n                if quarter in quarterly_summary.index:\r\n                    row = quarterly_summary.loc[quarter]\r\n                    q_data.append([quarter, f\"{row['2025 Budget']:,.0f}\", str(row['Cost Center Name']), str(row['Account name'])])\r\n            \r\n            q_table = Table(q_data)\r\n            q_table.setStyle(TableStyle([\r\n                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\r\n                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\r\n                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\r\n                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\r\n                ('FONTSIZE', (0, 0), (-1, 0), 12),\r\n                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\r\n                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\r\n                ('GRID', (0, 0), (-1, -1), 1, colors.black)\r\n            ]))\r\n            story.append(q_table)\r\n            story.append(Spacer(1, 20))\r\n        \r\n        # Cost Center Breakdown\r\n        story.append(Paragraph(\"Cost Center Breakdown\", styles['Heading2']))\r\n        story.append(Spacer(1, 12))\r\n        \r\n        cc_breakdown = df.groupby(\"Cost Center Name\").agg({\r\n            \"2025 Budget\": \"sum\",\r\n            CONSUMED_COL: \"sum\",\r\n            AVAILABLE_COL: \"sum\"\r\n        }).round(0)\r\n        \r\n        # Create cost center table\r\n        cc_data = [[\"Cost Center\", \"Budget\", \"Consumed\", \"Available\", \"Utilization %\"]]\r\n        for cc in cc_breakdown.index:\r\n            row = cc_breakdown.loc[cc]\r\n            utilization = (row[CONSUMED_COL] / row[\"2025 Budget\"] * 100) if row[\"2025 Budget\"] > 0 else 0\r\n            cc_data.append([\r\n                cc, \r\n                f\"{row['2025 Budget']:,.0f}\", \r\n                f\"{row[CONSUMED_COL]:,.0f}\", \r\n                f\"{row[AVAILABLE_COL]:,.0f}\",\r\n                f\"{utilization:.1f}%\"\r\n            ])\r\n        \r\n        cc_table = Table(cc_data)\r\n        cc_table.setStyle(TableStyle([\r\n            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\r\n            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\r\n            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\r\n            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\r\n            ('FONTSIZE', (0, 0), (-1, 0), 10),\r\n            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\r\n            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\r\n            ('GRID', (0, 0), (-1, -1), 1, colors.black),\r\n            ('FONTSIZE', (0, 1), (-1, -1), 8)\r\n        ]))\r\n        story.append(cc_table)\r\n        story.append(Spacer(1, 20))\r\n        \r\n        # Key Insights\r\n        story.append(Paragraph(\"Key Insights & Recommendations\", styles['Heading2']))\r\n        story.append(Spacer(1, 12))\r\n        \r\n        insights = []\r\n        if utilization_rate > 80:\r\n            insights.append(\"• High utilization rate indicates effective budget management\")\r\n        elif utilization_rate > 60:\r\n            insights.append(\"• Moderate utilization rate - consider optimizing budget allocation\")\r\n        else:\r\n            insights.append(\"• Low utilization rate - review budget allocation strategy\")\r\n        \r\n        if growth_2025 > 0:\r\n            insights.append(\"• Budget growth indicates expanding operations\")\r\n        else:\r\n            insights.append(\"• Budget reduction suggests cost optimization efforts\")\r\n        \r\n        if len(df) < 50:\r\n            insights.append(\"• Consider adding more data for comprehensive analysis\")\r\n        \r\n        insights.append(\"• Regular monitoring of quarterly performance recommended\")\r\n        insights.append(\"• Review cost center allocations periodically\")\r\n        \r\n        insights_text = \"<b>Insights:</b><br/>\" + \"<br/>\".join(insights)\r\n        story.append(Paragraph(insights_text, styles['Normal']))\r\n        story.append(Spacer(1, 20))\r\n        \r\n        # Report footer\r\n        story.append(Paragraph(f\"Report generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\", styles['Normal']))\r\n        \r\n        # Build PDF\r\n        doc.build(story)\r\n        buffer.seek(0)\r\n        \r\n        return buffer\r\n        \r\n    except Exception as e:\r\n        st.error(f\"Error generating report: {e}\")\r\n        return None\r\n\r\ndef get_download_link(buffer, filename):\r\n    \"\"\"Generate download link for PDF\"\"\"\r\n    b64 = base64.b64encode(buffer.getvalue()).decode()\r\n    href = f'<a href=\"data:application/pdf;base64,{b64}\" download=\"{filename}\">Download Report</a>'\r\n    return href\r\n\r\ndef show_summary_tab(df):\r\n    \"\"\"Display comprehensive summary and insights\"\"\"\r\n    st.header(\"📋 Summary & Insights\")\r\n    \r\n    # Overall statistics\r\n    st.subheader(\"📊 Overall Statistics\")\r\n    \r\n    col1, col2, col3, col4 = st.columns(4)\r\n    \r\n    with col1:\r\n        st.metric(\"Total Cost Centers\", df[\"Cost Center Name\"].nunique())\r\n        st.metric(\"Total Accounts\", df[\"Account name\"].nunique())\r\n        st.metric(\"Total Records\", len(df))\r\n    \r\n    with col2:\r\n        st.metric(\"2025 Total Budget\", f\"{df['2025 Budget'].sum():,.0f}\")\r\n        st.metric(\"2024 Total Budget\", f\"{df['2024 Budget'].sum():,.0f}\")\r\n        st.metric(\"2023 Total Budget\", f\"{df['2023 Budget'].sum():,.0f}\")\r\n    \r\n    with col3:\r\n        st.metric(\"Total Consumed\", f\"{df[CONSUMED_COL].sum():,.0f}\")\r\n        st.metric(\"Total Available\", f\"{df[AVAILABLE_COL].sum():,.0f}\")\r\n        utilization_rate = (df[CONSUMED_COL].sum() / df['2025 Budget'].sum() * 100) if df['2025 Budget'].sum() > 0 else 0\r\n        st.metric(\"Utilization Rate\", f\"{utilization_rate:.1f}%\")\r\n    \r\n    with col4:\r\n        if \"Quarter\" in df.columns:\r\n            st.metric(\"Q1 Records\", len(df[df[\"Quarter\"] == \"Q1\"]))\r\n            st.metric(\"Q2 Records\", len(df[df[\"Quarter\"] == \"Q2\"]))\r\n            st.metric(\"Q3 Records\", len(df[df[\"Quarter\"] == \"Q3\"]))\r\n            st.metric(\"Q4 Records\", len(df[df[\"Quarter\"] == \"Q4\"]))\r\n        else:\r\n            st.metric(\"Date Range\", \"N/A\")\r\n            st.metric(\"Latest Update\", \"N/A\")\r\n            st.metric(\"Data Quality\", \"Good\")\r\n    \r\n    st.markdown(\"---\")\r\n    \r\n    # Report Generation Button\r\n    st.subheader(\"📄 Generate Report\")\r\n    col1, col2, col3 = st.columns([1, 2, 1])\r\n    \r\n    with col2:\r\n        if st.button(\"📊 Generate Comprehensive Report\", type=\"primary\", use_container_width=True):\r\n            with st.spinner(\"Generating report...\"):\r\n                buffer = generate_report(df)\r\n                if buffer:\r\n                    st.success(\"Report generated successfully!\")\r\n                    \r\n                    # Create download link\r\n                    filename = f\"GASCO_Budget_Report_{CURRENT_YEAR}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf\"\r\n                    download_link = get_download_link(buffer, filename)\r\n                    st.markdown(download_link, unsafe_allow_html=True)\r\n                    \r\n                    st.info(\"📋 Report includes:\")\r\n                    st.write(\"• Executive Summary\")\r\n                    st.write(\"• Key Performance Metrics\")\r\n                    st.write(\"• Top Performers Analysis\")\r\n                    st.write(\"• Year-over-Year Trends\")\r\n                    st.write(\"• Quarterly Analysis\")\r\n                    st.write(\"• Cost Center Breakdown\")\r\n                    st.write(\"• Key Insights & Recommendations\")\r\n                else:\r\n                    st.error(\"Failed to generate report. Please try again.\")\r\n    \r\n    st.markdown(\"---\")\r\n    \r\n    # Top performers\r\n    st.subheader(\"🏆 Top Performers\")\r\n    \r\n    col1, col2 = st.columns(2)\r\n    \r\n    with col1:\r\n        # Top cost centers by budget\r\n        top_cc_budget = df.groupby(\"Cost Center Name\")[\"2025 Budget\"].sum().sort_values(ascending=False).head(5)\r\n        st.write(\"**Top 5 Cost Centers by Budget:**\")\r\n        for i, (cc, budget) in enumerate(top_cc_budget.items(), 1):\r\n            st.write(f\"{i}. {cc}: {budget:,.0f}\")\r\n    \r\n    with col2:\r\n        # Top accounts by budget\r\n        top_accounts_budget = df.groupby(\"Account name\")[\"2025 Budget\"].sum().sort_values(ascending=False).head(5)\r\n        st.write(\"**Top 5 Accounts by Budget:**\")\r\n        for i, (account, budget) in enumerate(top_accounts_budget.items(), 1):\r\n            st.write(f\"{i}. {account}: {budget:,.0f}\")\r\n    \r\n    st.markdown(\"---\")\r\n    \r\n    # Budget distribution\r\n    st.subheader(\"📊 Budget Distribution\")\r\n    \r\n    col1, col2 = st.columns(2)\r\n    \r\n    with col1:\r\n        # Cost center distribution\r\n        cc_distribution = df.groupby(\"Cost Center Name\")[\"2025 Budget\"].sum()\r\n        fig = px.pie(values=cc_distribution.values, names=cc_distribution.index,\r\n                     title=\"Budget Distribution by Cost Center\")\r\n        st.plotly_chart(fig, use_container_width=True)\r\n    \r\n    with col2:\r\n        # Account distribution\r\n        account_distribution = df.groupby(\"Account name\")[\"2025 Budget\"].sum().head(10)\r\n        fig = px.pie(values=account_distribution.values, names=account_distribution.index,\r\n                     title=\"Top 10 Accounts by Budget\")\r\n        st.plotly_chart(fig, use_container_width=True)\r\n    \r\n    st.markdown(\"---\")\r\n    \r\n    # Year-over-year trends\r\n    st.subheader(\"📈 Year-over-Year Trends\")\r\n    \r\n    # Calculate trends\r\n    total_2023 = df[\"2023 Budget\"].sum()\r\n    total_2024 = df[\"2024 Budget\"].sum()\r\n    total_2025 = df[\"2025 Budget\"].sum()\r\n    \r\n    growth_2024 = ((total_2024 - total_2023) / total_2023 * 100) if total_2023 > 0 else 0\r\n    growth_2025 = ((total_2025 - total_2024) / total_2024 * 100) if total_2024 > 0 else 0\r\n    \r\n    col1, col2, col3 = st.columns(3)\r\n    \r\n    with col1:\r\n        st.metric(\"2023 Total\", f\"{total_2023:,.0f}\")\r\n        st.metric(\"2024 Total\", f\"{total_2024:,.0f}\")\r\n        st.metric(\"2025 Total\", f\"{total_2025:,.0f}\")\r\n    \r\n    with col2:\r\n        st.metric(\"2024 Growth\", f\"{growth_2024:+.1f}%\", \r\n                 delta=f\"{'Increase' if growth_2024 > 0 else 'Decrease'}\")\r\n        st.metric(\"2025 Growth\", f\"{growth_2025:+.1f}%\",\r\n                 delta=f\"{'Increase' if growth_2025 > 0 else 'Decrease'}\")\r\n        st.metric(\"3-Year CAGR\", f\"{((total_2025/total_2023)**(1/2)-1)*100:.1f}%\")\r\n    \r\n    with col3:\r\n        # Budget trend chart\r\n        trend_data = pd.DataFrame({\r\n            'Year': ['2023', '2024', '2025'],\r\n            'Budget': [total_2023, total_2024, total_2025]\r\n        })\r\n        fig = px.line(trend_data, x='Year', y='Budget', \r\n                     title=\"Budget Trend Over Years\", markers=True)\r\n        st.plotly_chart(fig, use_container_width=True)\r\n    \r\n    st.markdown(\"---\")\r\n    \r\n    # Quarterly analysis (if available)\r\n    if \"Quarter\" in df.columns:\r\n        st.subheader(\"📅 Quarterly Analysis\")\r\n        \r\n        col1, col2 = st.columns(2)\r\n        \r\n        with col1:\r\n            # Quarterly distribution\r\n            quarterly_dist = df.groupby(\"Quarter\")[\"2025 Budget\"].sum()\r\n            fig = px.bar(x=quarterly_dist.index, y=quarterly_dist.values,\r\n                        title=\"Budget Distribution by Quarter\",\r\n                        color=quarterly_dist.index,\r\n                        color_discrete_map={'Q1': '#1f77b4', 'Q2': '#ff7f0e', 'Q3': '#2ca02c', 'Q4': '#d62728'})\r\n            st.plotly_chart(fig, use_container_width=True)\r\n        \r\n        with col2:\r\n            # Quarterly summary table\r\n            quarterly_summary = df.groupby(\"Quarter\").agg({\r\n                \"2025 Budget\": \"sum\",\r\n                \"Cost Center Name\": \"nunique\",\r\n                \"Account name\": \"nunique\"\r\n            }).round(0)\r\n            quarterly_summary.columns = [\"Total Budget\", \"Cost Centers\", \"Accounts\"]\r\n            st.write(\"**Quarterly Summary:**\")\r\n            st.dataframe(quarterly_summary, use_container_width=True)\r\n    \r\n    st.markdown(\"---\")\r\n    \r\n    # Key insights\r\n    st.subheader(\"💡 Key Insights\")\r\n    \r\n    # Budget efficiency\r\n    col1, col2 = st.columns(2)\r\n    \r\n    with col1:\r\n        st.write(\"**Budget Efficiency:**\")\r\n        if utilization_rate > 80:\r\n            st.success(f\"High utilization rate ({utilization_rate:.1f}%) - Budget is being used effectively\")\r\n        elif utilization_rate > 60:\r\n            st.info(f\"Moderate utilization rate ({utilization_rate:.1f}%) - Room for optimization\")\r\n        else:\r\n            st.warning(f\"Low utilization rate ({utilization_rate:.1f}%) - Consider budget reallocation\")\r\n        \r\n        # Growth insights\r\n        st.write(\"**Growth Analysis:**\")\r\n        if growth_2025 > 0:\r\n            st.success(f\"Budget increased by {growth_2025:.1f}% in 2025\")\r\n        else:\r\n            st.warning(f\"Budget decreased by {abs(growth_2025):.1f}% in 2025\")\r\n    \r\n    with col2:\r\n        # Top cost center insights\r\n        top_cc = df.groupby(\"Cost Center Name\")[\"2025 Budget\"].sum().idxmax()\r\n        top_cc_budget = df.groupby(\"Cost Center Name\")[\"2025 Budget\"].sum().max()\r\n        st.write(\"**Top Cost Center:**\")\r\n        st.write(f\"**{top_cc}** with {top_cc_budget:,.0f} budget allocation\")\r\n        \r\n        # Top account insights\r\n        top_account = df.groupby(\"Account name\")[\"2025 Budget\"].sum().idxmax()\r\n        top_account_budget = df.groupby(\"Account name\")[\"2025 Budget\"].sum().max()\r\n        st.write(\"**Top Account:**\")\r\n        st.write(f\"**{top_account}** with {top_account_budget:,.0f} budget allocation\")\r\n    \r\n    st.markdown(\"---\")\r\n    \r\n    # Key Factors & Top Indicators\r\n    st.subheader(\"🎯 Key Factors & Top Indicators\")\r\n    \r\n    col1, col2 = st.columns(2)\r\n    \r\n    with col1:\r\n        # Key Performance Indicators\r\n        st.write(\"**📊 Top Performance Indicators:**\")\r\n        \r\n        # Budget efficiency indicator\r\n        if utilization_rate >= 90:\r\n            st.success(f\"🔥 Excellent Efficiency: {utilization_rate:.1f}%\")\r\n        elif utilization_rate >= 75:\r\n            st.info(f\"✅ Good Efficiency: {utilization_rate:.1f}%\")\r\n        elif utilization_rate >= 50:\r\n            st.warning(f\"⚠️ Moderate Efficiency: {utilization_rate:.1f}%\")\r\n        else:\r\n            st.error(f\"❌ Low Efficiency: {utilization_rate:.1f}%\")\r\n        \r\n        # Growth indicator\r\n        if growth_2025 >= 10:\r\n            st.success(f\"🚀 Strong Growth: +{growth_2025:.1f}%\")\r\n        elif growth_2025 >= 5:\r\n            st.info(f\"📈 Positive Growth: +{growth_2025:.1f}%\")\r\n        elif growth_2025 >= 0:\r\n            st.warning(f\"📊 Stable: {growth_2025:.1f}%\")\r\n        else:\r\n            st.error(f\"📉 Declining: {growth_2025:.1f}%\")\r\n        \r\n        # Cost center diversity\r\n        cc_count = df[\"Cost Center Name\"].nunique()\r\n        if cc_count >= 10:\r\n            st.success(f\"🏢 High Diversity: {cc_count} Cost Centers\")\r\n        elif cc_count >= 5:\r\n            st.info(f\"🏢 Moderate Diversity: {cc_count} Cost Centers\")\r\n        else:\r\n            st.warning(f\"🏢 Low Diversity: {cc_count} Cost Centers\")\r\n    \r\n    with col2:\r\n        # Key Risk Factors\r\n        st.write(\"**⚠️ Key Risk Factors:**\")\r\n        \r\n        # Budget overrun risk\r\n        overrun_risk = (df[CONSUMED_COL] > df[\"2025 Budget\"]).sum()\r\n        if overrun_risk > 0:\r\n            st.error(f\"🚨 Budget Overrun Risk: {overrun_risk} items\")\r\n        else:\r\n            st.success(\"✅ No Budget Overrun Risk\")\r\n        \r\n        # Low utilization risk\r\n        low_util_risk = len(df[df[CONSUMED_COL] / df[\"2025 Budget\"] < 0.3])\r\n        if low_util_risk > 0:\r\n            st.warning(f\"⚠️ Low Utilization Risk: {low_util_risk} items\")\r\n        else:\r\n            st.success(\"✅ Good Utilization Across All Items\")\r\n        \r\n        # Zero budget risk\r\n        zero_budget_risk = len(df[df[\"2025 Budget\"] == 0])\r\n        if zero_budget_risk > 0:\r\n            st.error(f\"❌ Zero Budget Items: {zero_budget_risk}\")\r\n        else:\r\n            st.success(\"✅ All Items Have Budget Allocation\")\r\n    \r\n    st.markdown(\"---\")\r\n    \r\n    # Budget Alarms & Remaining Analysis\r\n    st.subheader(\"🚨 Budget Alarms & Remaining Analysis\")\r\n    \r\n    col1, col2 = st.columns(2)\r\n    \r\n    with col1:\r\n        # Critical alarms\r\n        st.write(\"**🚨 Critical Alarms:**\")\r\n        \r\n        # High consumption alarms\r\n        high_consumption = df[(df[\"2025 Budget\"] > 0) & (df[CONSUMED_COL] / df[\"2025 Budget\"] > 0.9)]\r\n        if len(high_consumption) > 0:\r\n            st.error(f\"🔥 High Consumption Alert: {len(high_consumption)} items >90% consumed\")\r\n            for _, row in high_consumption.head(3).iterrows():\r\n                st.write(f\"• {row['Cost Center Name']} - {row['Account name']}: {row[CONSUMED_COL]/row['2025 Budget']*100:.1f}%\")\r\n        else:\r\n            st.success(\"✅ No High Consumption Alarms\")\r\n        \r\n        # Budget depletion alarms\r\n        depleted_budget = df[df[AVAILABLE_COL] < df[\"2025 Budget\"] * 0.1]\r\n        if len(depleted_budget) > 0:\r\n            st.error(f\"💸 Budget Depletion Alert: {len(depleted_budget)} items <10% remaining\")\r\n        else:\r\n            st.success(\"✅ No Budget Depletion Alarms\")\r\n    \r\n    with col2:\r\n        # Remaining budget analysis\r\n        st.write(\"**💰 Remaining Budget Analysis:**\")\r\n        \r\n        total_remaining = df[AVAILABLE_COL].sum()\r\n        avg_remaining = df[AVAILABLE_COL].mean()\r\n        \r\n        st.metric(\"Total Remaining\", f\"{total_remaining:,.0f}\")\r\n        st.metric(\"Average Remaining\", f\"{avg_remaining:,.0f}\")\r\n        \r\n        # Remaining by cost center\r\n        remaining_by_cc = df.groupby(\"Cost Center Name\")[AVAILABLE_COL].sum().sort_values(ascending=False)\r\n        st.write(\"**Top 3 Cost Centers by Remaining Budget:**\")\r\n        for i, (cc, remaining) in enumerate(remaining_by_cc.head(3).items(), 1):\r\n            st.write(f\"{i}. {cc}: {remaining:,.0f}\")\r\n    \r\n    st.markdown(\"---\")\r\n    \r\n    # Insights Comparison (Increase/Decrease Analysis)\r\n    st.subheader(\"📈📉 Insights Comparison\")\r\n    \r\n    col1, col2 = st.columns(2)\r\n    \r\n    with col1:\r\n        st.write(\"**📈 Positive Trends:**\")\r\n        \r\n        # Budget increases\r\n        if growth_2025 > 0:\r\n            st.success(f\"✅ Budget Growth: +{growth_2025:.1f}% increase\")\r\n        \r\n        # High performers\r\n        top_performers = df.groupby(\"Cost Center Name\")[\"2025 Budget\"].sum().sort_values(ascending=False).head(3)\r\n        st.write(\"🏆 Top 3 Budget Allocations:\")\r\n        for i, (cc, budget) in enumerate(top_performers.items(), 1):\r\n            st.write(f\"{i}. {cc}: {budget:,.0f}\")\r\n        \r\n        # Efficient utilization\r\n        efficient_cc = df.groupby(\"Cost Center Name\").apply(\r\n            lambda x: (x[CONSUMED_COL].sum() / x[\"2025 Budget\"].sum() * 100) if x[\"2025 Budget\"].sum() > 0 else 0\r\n        ).sort_values(ascending=False).head(3)\r\n        \r\n        st.write(\"⚡ Most Efficient Cost Centers:\")\r\n        for i, (cc, efficiency) in enumerate(efficient_cc.items(), 1):\r\n            st.write(f\"{i}. {cc}: {efficiency:.1f}% utilization\")\r\n    \r\n    with col2:\r\n        st.write(\"**📉 Areas of Concern:**\")\r\n        \r\n        # Budget decreases\r\n        if growth_2025 < 0:\r\n            st.error(f\"📉 Budget Decline: {abs(growth_2025):.1f}% decrease\")\r\n        \r\n        # Low performers\r\n        low_performers = df.groupby(\"Cost Center Name\")[\"2025 Budget\"].sum().sort_values().head(3)\r\n        st.write(\"🔻 Lowest Budget Allocations:\")\r\n        for i, (cc, budget) in enumerate(low_performers.items(), 1):\r\n            st.write(f\"{i}. {cc}: {budget:,.0f}\")\r\n        \r\n        # Inefficient utilization\r\n        inefficient_cc = df.groupby(\"Cost Center Name\").apply(\r\n            lambda x: (x[CONSUMED_COL].sum() / x[\"2025 Budget\"].sum() * 100) if x[\"2025 Budget\"].sum() > 0 else 0\r\n        ).sort_values().head(3)\r\n        \r\n        st.write(\"🐌 Least Efficient Cost Centers:\")\r\n        for i, (cc, efficiency) in enumerate(inefficient_cc.items(), 1):\r\n            if efficiency > 0:\r\n                st.write(f\"{i}. {cc}: {efficiency:.1f}% utilization\")\r\n            else:\r\n                st.write(f\"{i}. {cc}: No consumption\")\r\n    \r\n    # Year-over-year comparison insights\r\n    st.markdown(\"---\")\r\n    st.subheader(\"📊 Year-over-Year Comparison Insights\")\r\n    \r\n    col1, col2, col3 = st.columns(3)\r\n    \r\n    with col1:\r\n        # 2023-2024 comparison\r\n        growth_2024_vs_2023 = ((total_2024 - total_2023) / total_2023 * 100) if total_2023 > 0 else 0\r\n        if growth_2024_vs_2023 > 0:\r\n            st.success(f\"2024 vs 2023: +{growth_2024_vs_2023:.1f}%\")\r\n        else:\r\n            st.error(f\"2024 vs 2023: {growth_2024_vs_2023:.1f}%\")\r\n    \r\n    with col2:\r\n        # 2025-2024 comparison\r\n        if growth_2025 > 0:\r\n            st.success(f\"2025 vs 2024: +{growth_2025:.1f}%\")\r\n        else:\r\n            st.error(f\"2025 vs 2024: {growth_2025:.1f}%\")\r\n    \r\n    with col3:\r\n        # 3-year trend\r\n        if growth_2025 > 0 and growth_2024_vs_2023 > 0:\r\n            st.success(\"📈 Consistent Growth Trend\")\r\n        elif growth_2025 < 0 and growth_2024_vs_2023 < 0:\r\n            st.error(\"📉 Consistent Decline Trend\")\r\n        else:\r\n            st.warning(\"📊 Mixed Growth Pattern\")\r\n\r\ndef show_optimizer_dashboard():\r\n\timport os\r\n\tst.title(\"⚙️ Compressor Optimization\")\r\n\t\r\n\t# Simple test to ensure section appears\r\n\tst.write(\"🔧 **Compressor Data Management**\")\r\n\t\r\n\t# Create a simple form directly\r\n\twith st.form(\"simple_compressor_form\"):\r\n\t\tst.write(\"**Update Compressor Data**\")\r\n\t\tcol1, col2 = st.columns(2)\r\n\t\t\r\n\t\twith col1:\r\n\t\t\tcompressor_id = st.selectbox(\"Compressor ID\", [\"A\", \"B\", \"C\", \"D\"])\r\n\t\t\tcompressor_name = st.text_input(\"Compressor Name\", value=f\"Compressor {compressor_id}\")\r\n\t\t\tcurrent_hours = st.number_input(\"Current Hours\", min_value=0, value=500, step=1)\r\n\t\t\r\n\t\twith col2:\r\n\t\t\tstatus = st.selectbox(\"Status\", [\"Active\", \"Maintenance\", \"Inactive\", \"Repair\"])\r\n\t\t\tnotes = st.text_area(\"Notes\", placeholder=\"Enter notes here\")\r\n\t\t\r\n\t\tif st.form_submit_button(\"Save Data\"):\r\n\t\t\t# Simple save to Excel\r\n\t\t\ttry:\r\n\t\t\t\tdata = {\r\n\t\t\t\t\t'Compressor ID': [compressor_id],\r\n\t\t\t\t\t'Compressor Name': [compressor_name], \r\n\t\t\t\t\t'Current Hours': [current_hours],\r\n\t\t\t\t\t'Date Updated': [datetime.now().date()],\r\n\t\t\t\t\t'Status': [status],\r\n\t\t\t\t\t'Notes': [notes]\r\n\t\t\t\t}\r\n\t\t\t\tdf_new = pd.DataFrame(data)\r\n\t\t\t\t\r\n\t\t\t\t# Delete the corrupted file if it exists and recreate it\r\n\t\t\t\tif os.path.exists(\"Data/Compressor_Data.xlsx\"):\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\tdf_existing = pd.read_excel(\"Data/Compressor_Data.xlsx\", engine='openpyxl')\r\n\t\t\t\t\texcept:\r\n\t\t\t\t\t\t# File is corrupted, delete and recreate\r\n\t\t\t\t\t\tos.remove(\"Data/Compressor_Data.xlsx\")\r\n\t\t\t\t\t\t# Create initial data\r\n\t\t\t\t\t\tinitial_data = {\r\n\t\t\t\t\t\t\t'Compressor ID': ['A', 'B', 'C'],\r\n\t\t\t\t\t\t\t'Compressor Name': ['Compressor A', 'Compressor B', 'Compressor C'],\r\n\t\t\t\t\t\t\t'Current Hours': [500, 79300, 76900],\r\n\t\t\t\t\t\t\t'Date Updated': [datetime.now().date()] * 3,\r\n\t\t\t\t\t\t\t'Status': ['Active', 'Active', 'Active'],\r\n\t\t\t\t\t\t\t'Notes': ['Initial setup', 'High usage unit', 'Standard operation']\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdf_existing = pd.DataFrame(initial_data)\r\n\t\t\t\t\t\tdf_existing.to_excel(\"Data/Compressor_Data.xlsx\", index=False, engine='openpyxl')\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Update if exists, otherwise append\r\n\t\t\t\t\tif compressor_id in df_existing['Compressor ID'].values:\r\n\t\t\t\t\t\tmask = df_existing['Compressor ID'] == compressor_id\r\n\t\t\t\t\t\tfor key, value in data.items():\r\n\t\t\t\t\t\t\tdf_existing.loc[mask, key] = value[0]\r\n\t\t\t\t\t\tdf_existing.to_excel(\"Data/Compressor_Data.xlsx\", index=False, engine='openpyxl')\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tdf_combined = pd.concat([df_existing, df_new], ignore_index=True)\r\n\t\t\t\t\t\tdf_combined.to_excel(\"Data/Compressor_Data.xlsx\", index=False, engine='openpyxl')\r\n\t\t\t\telse:\r\n\t\t\t\t\t# Create new file with initial data plus new entry\r\n\t\t\t\t\tinitial_data = {\r\n\t\t\t\t\t\t'Compressor ID': ['A', 'B', 'C', compressor_id],\r\n\t\t\t\t\t\t'Compressor Name': ['Compressor A', 'Compressor B', 'Compressor C', compressor_name],\r\n\t\t\t\t\t\t'Current Hours': [500, 79300, 76900, current_hours],\r\n\t\t\t\t\t\t'Date Updated': [datetime.now().date()] * 4,\r\n\t\t\t\t\t\t'Status': ['Active', 'Active', 'Active', status],\r\n\t\t\t\t\t\t'Notes': ['Initial setup', 'High usage unit', 'Standard operation', notes]\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdf_all = pd.DataFrame(initial_data)\r\n\t\t\t\t\tdf_all.to_excel(\"Data/Compressor_Data.xlsx\", index=False, engine='openpyxl')\r\n\t\t\t\t\r\n\t\t\t\tst.success(\"✅ Data saved successfully!\")\r\n\t\t\texcept Exception as e:\r\n\t\t\t\tst.error(f\"Error saving data: {e}\")\r\n\t\r\n\t# Add data viewing section\r\n\tst.markdown(\"---\")\r\n\tst.write(\"📊 **Current Compressor Data**\")\r\n\t\r\n\ttry:\r\n\t\tif os.path.exists(\"Data/Compressor_Data.xlsx\"):\r\n\t\t\tdf_view = pd.read_excel(\"Data/Compressor_Data.xlsx\", engine='openpyxl')\r\n\t\t\t\r\n\t\t\tif not df_view.empty:\r\n\t\t\t\t# Display metrics\r\n\t\t\t\tcol1, col2, col3, col4 = st.columns(4)\r\n\t\t\t\twith col1:\r\n\t\t\t\t\tst.metric(\"Total Compressors\", len(df_view))\r\n\t\t\t\twith col2:\r\n\t\t\t\t\tactive_count = len(df_view[df_view['Status'] == 'Active']) if 'Status' in df_view.columns else 0\r\n\t\t\t\t\tst.metric(\"Active Units\", active_count)\r\n\t\t\t\twith col3:\r\n\t\t\t\t\ttotal_hours = df_view['Current Hours'].sum() if 'Current Hours' in df_view.columns else 0\r\n\t\t\t\t\tst.metric(\"Total Hours\", f\"{total_hours:,}\")\r\n\t\t\t\twith col4:\r\n\t\t\t\t\tavg_hours = df_view['Current Hours'].mean() if 'Current Hours' in df_view.columns else 0\r\n\t\t\t\t\tst.metric(\"Average Hours\", f\"{avg_hours:,.0f}\")\r\n\t\t\t\t\r\n\t\t\t\t# Display data table\r\n\t\t\t\tst.subheader(\"📋 Compressor Details\")\r\n\t\t\t\tst.dataframe(df_view, use_container_width=True, hide_index=True)\r\n\t\t\t\t\r\n\t\t\t\t# Add status breakdown chart\r\n\t\t\t\tif 'Status' in df_view.columns:\r\n\t\t\t\t\tst.subheader(\"📈 Status Distribution\")\r\n\t\t\t\t\tstatus_counts = df_view['Status'].value_counts()\r\n\t\t\t\t\tfig = px.pie(values=status_counts.values, names=status_counts.index, \r\n\t\t\t\t\t\t\t\ttitle=\"Compressor Status Distribution\")\r\n\t\t\t\t\tst.plotly_chart(fig, use_container_width=True)\r\n\t\t\t\t\r\n\t\t\t\t# Add hours comparison chart\r\n\t\t\t\tif 'Current Hours' in df_view.columns and 'Compressor Name' in df_view.columns:\r\n\t\t\t\t\tst.subheader(\"⏱️ Operating Hours Comparison\")\r\n\t\t\t\t\tfig = px.bar(df_view, x='Compressor Name', y='Current Hours',\r\n\t\t\t\t\t\t\t\ttitle=\"Current Operating Hours by Compressor\",\r\n\t\t\t\t\t\t\t\tcolor='Status' if 'Status' in df_view.columns else None)\r\n\t\t\t\t\tfig.update_layout(xaxis_title=\"Compressor\", yaxis_title=\"Hours\")\r\n\t\t\t\t\tst.plotly_chart(fig, use_container_width=True)\r\n\t\t\telse:\r\n\t\t\t\tst.warning(\"No compressor data available\")\r\n\t\telse:\r\n\t\t\tst.warning(\"No data file found. Add some compressor data first.\")\r\n\texcept Exception as e:\r\n\t\tst.error(f\"Error loading data: {e}\")\r\n\r\n\tst.markdown(\"---\")\r\n\r\n\t# Persist results so multiple runs can be viewed together\r\n\tif 'opt_results' not in st.session_state:\r\n\t\tst.session_state.opt_results = {}\r\n\r\n\t# Gap trade-off for models 2 and 3\r\n\tlambda_val = st.slider(\"Gap trade-off (lambda)\", min_value=0.0, max_value=1.0, value=0.1, step=0.05, help=\"Higher values weight the gap objective more strongly\")\r\n\r\n\t# Run-all control\r\n\trun_all = st.button(\"Run All Models\", type=\"primary\")\r\n\r\n\tcol1, col2, col3 = st.columns(3)\r\n\r\n\twith col1:\r\n\t\tif st.button(\"Run Model 1: Minimize Cost\") or run_all:\r\n\t\t\tdf1 = solve_true_min_cost_mip()\r\n\t\t\ttotal_hours = float(df1['Assigned Hours'].sum()) if 'Assigned Hours' in df1.columns else 0.0\r\n\t\t\ttotal_cost = float(df1['Exact Cost'].sum()) if 'Exact Cost' in df1.columns else 0.0\r\n\t\t\tst.session_state.opt_results['m1'] = {\r\n\t\t\t\t'df': df1,\r\n\t\t\t\t'total_hours': total_hours,\r\n\t\t\t\t'total_cost': total_cost\r\n\t\t\t}\r\n\r\n\twith col2:\r\n\t\tif st.button(\"Run Model 2: Cost + Max Gap\") or run_all:\r\n\t\t\tdf2, gap2, total_cost2 = solve_true_min_cost_and_max_gap(lambda_gap=lambda_val)\r\n\t\t\ttotal_hours2 = float(df2['Assigned Hours'].sum()) if 'Assigned Hours' in df2.columns else 0.0\r\n\t\t\tst.session_state.opt_results['m2'] = {\r\n\t\t\t\t'df': df2,\r\n\t\t\t\t'total_hours': total_hours2,\r\n\t\t\t\t'total_cost': float(total_cost2),\r\n\t\t\t\t'gap': float(gap2),\r\n\t\t\t\t'lambda': lambda_val\r\n\t\t\t}\r\n\r\n\twith col3:\r\n\t\tif st.button(\"Run Model 3: Cost + Min Gap\") or run_all:\r\n\t\t\tdf3, gap3, total_cost3 = solve_true_min_cost_and_min_gap(lambda_gap=lambda_val)\r\n\t\t\ttotal_hours3 = float(df3['Assigned Hours'].sum()) if 'Assigned Hours' in df3.columns else 0.0\r\n\t\t\tst.session_state.opt_results['m3'] = {\r\n\t\t\t\t'df': df3,\r\n\t\t\t\t'total_hours': total_hours3,\r\n\t\t\t\t'total_cost': float(total_cost3),\r\n\t\t\t\t'gap': float(gap3),\r\n\t\t\t\t'lambda': lambda_val\r\n\t\t\t}\r\n\r\n\tst.markdown(\"---\")\r\n\r\n\t# Render results for each model if available\r\n\texp1, exp2, exp3 = st.tabs([\r\n\t\t\"Model 1: Minimize Cost\",\r\n\t\t\"Model 2: Cost + Max Gap\",\r\n\t\t\"Model 3: Cost + Min Gap\"\r\n\t])\r\n\r\n\twith exp1:\r\n\t\tres = st.session_state.opt_results.get('m1')\r\n\t\tif res:\r\n\t\t\tc1, c2 = st.columns(2)\r\n\t\t\tc1.metric(\"Total Assigned Hours\", f\"{res['total_hours']:,.0f}\")\r\n\t\t\tc2.metric(\"Total Exact Cost\", f\"{res['total_cost']:,.2f}\")\r\n\t\t\tst.dataframe(res['df'], use_container_width=True)\r\n\t\telse:\r\n\t\t\tst.info(\"Run Model 1 to view results.\")\r\n\r\n\twith exp2:\r\n\t\tres = st.session_state.opt_results.get('m2')\r\n\t\tif res:\r\n\t\t\tc1, c2, c3 = st.columns(3)\r\n\t\t\tc1.metric(\"Total Assigned Hours\", f\"{res['total_hours']:,.0f}\")\r\n\t\t\tc2.metric(\"Total Exact Cost\", f\"{res['total_cost']:,.2f}\")\r\n\t\t\tc3.metric(\"Range Gap (hrs)\", f\"{res['gap']:,.0f}\")\r\n\t\t\tst.caption(f\"λ = {res['lambda']}\")\r\n\t\t\tst.dataframe(res['df'], use_container_width=True)\r\n\t\telse:\r\n\t\t\tst.info(\"Run Model 2 to view results.\")\r\n\r\n\twith exp3:\r\n\t\tres = st.session_state.opt_results.get('m3')\r\n\t\tif res:\r\n\t\t\tc1, c2, c3 = st.columns(3)\r\n\t\t\tc1.metric(\"Total Assigned Hours\", f\"{res['total_hours']:,.0f}\")\r\n\t\t\tc2.metric(\"Total Exact Cost\", f\"{res['total_cost']:,.2f}\")\r\n\t\t\tc3.metric(\"Range Gap (hrs)\", f\"{res['gap']:,.0f}\")\r\n\t\t\tst.caption(f\"λ = {res['lambda']}\")\r\n\t\t\tst.dataframe(res['df'], use_container_width=True)\r\n\t\telse:\r\n\t\t\tst.info(\"Run Model 3 to view results.\")\r\n"
        }
    ]
}